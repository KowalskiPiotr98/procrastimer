package repository

import (
	"github.com/KowalskiPiotr98/gotabase"
	"github.com/gofrs/uuid"
	log "github.com/sirupsen/logrus"
)

// CreatableWithId defines a struct that can be added to the database, which then sets the id of the object to be set.
type CreatableWithId interface {
	// SetId sets the id of the struct as generated by the database.
	SetId(uuid.UUID)
}

// CreateObject executes a database query that insert the object and returns and sets the id.
func CreateObject[T CreatableWithId](database gotabase.Connector, object T, query string, args ...interface{}) error {
	result, err := database.QueryRow(query, args...)
	if err != nil {
		if IsDuplicateErr(err) {
			return AlreadyExistsErr
		}
		log.Warnf("Failed to insert object to database: %v", err)
		return err
	}

	var id uuid.UUID
	if err := result.Scan(&id); err != nil {
		log.Warnf("Failed to scan id of the inserted object: %v", err)
		return err
	}

	object.SetId(id)
	return nil
}

// UpdateObjectWithVerify executes an update query and verifies if exactly a single record was modified in the database.
//
// NOTE: this function might return TooManyRowsAffected error, indicating that the query modified more than a single database row.
// In this case, the query will not be automatically reverted.
// For this reason, it is recommended to pass a transaction into this function and revert it on error.
func UpdateObjectWithVerify(database gotabase.Connector, query string, args ...interface{}) error {
	results, err := database.Exec(query, args...)
	if err != nil {
		if IsDuplicateErr(err) {
			return AlreadyExistsErr
		}
		log.Warnf("Failed to update object in database: %v", err)
		return err
	}

	affected, err := results.RowsAffected()
	if err != nil {
		log.Warnf("Failed to get affected rows by update query: %v", err)
		return err
	}
	if affected == 1 {
		return nil
	}
	if affected < 1 {
		return DataNotFoundErr
	}
	return TooManyRowsAffected
}
